AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to deploy the Well-Architected IaC Analyzer solution from a controlled deployment environment running on a temporary EC2'

Parameters:
  # Base Settings
  PublicLoadBalancer:
    Type: String
    Default: 'False'
    AllowedValues: ['True', 'False']
    Description: 'Deploy with internet-facing load balancer (True) or internal load balancer (False). WARNING: If you set this to True, consider to also enable authentication or your application will be publicly accessible.'
  
  ModelId:
    Type: String
    Default: 'anthropic.claude-3-5-sonnet-20241022-v2:0'
    Description: 'Amazon Bedrock Model ID to use for analysis. By default uses Claude 3.5 Sonnet v2.'

  # Authentication Settings
  Authentication:
    Type: String
    Default: 'False'
    AllowedValues: ['True', 'False']
    Description: 'Enable authentication for the application'
  
  AuthType:
    Type: String
    Default: 'none'
    AllowedValues: ['none', 'new-cognito', 'existing-cognito', 'oidc']
    Description: 'Authentication type to use (none, new-cognito, existing-cognito, oidc)'
  
  # Certificate Settings
  CertificateArn:
    Type: String
    Default: ''
    Description: 'ARN of the SSL certificate in ACM. Required when Authentication is True. Example: arn:aws:acm:region:account:certificate/certificate-id'
    AllowedPattern: '^(arn:aws:acm:[a-z0-9-]+:[0-9]{12}:certificate/[a-zA-Z0-9-]+|)$'
    ConstraintDescription: 'Certificate ARN must be in the format: arn:aws:acm:region:account:certificate/certificate-id or empty'
  
  # New Cognito Settings
  CognitoDomainPrefix:
    Type: String
    Default: ''
    Description: 'Domain prefix for the new Cognito user pool. Required when "Authentication Method = new-cognito". Must be unique within your region. Example: wa-analyzer'
  
  CallbackUrls:
    Type: String
    Default: ''
    Description: 'Comma-separated list of allowed callback URLs for Cognito. Required when "Authentication Method = new-cognito". Example: https://wa-analyzer.example.com/oauth2/idpresponse'
  
  LogoutUrl:
    Type: String
    Default: ''
    Description: 'URL to redirect to after logout. Required when "Authentication Method = new-cognito". Example: https://wa-analyzer.example.com'
  
  # Existing Cognito Settings
  ExistingUserPoolArn:
    Type: String
    Default: ''
    Description: 'ARN of the existing Cognito user pool. Required when "Authentication Method = existing-cognito". Example: arn:aws:cognito-idp:region:account:userpool/pool-id'
  
  ExistingUserPoolClientId:
    Type: String
    Default: ''
    Description: 'Client ID of the existing Cognito user pool. Required when "Authentication Method = existing-cognito".'
  
  ExistingUserPoolDomain:
    Type: String
    Default: ''
    Description: 'Domain of the existing Cognito user pool. Required when "Authentication Method = existing-cognito". Example: domain.auth.region.amazoncognito.com'
  
  ExistingCognitoLogoutUrl:
    Type: String
    Default: ''
    Description: 'Logout URL for the existing Cognito user pool. Required when "Authentication Method = existing-cognito". Example: https://wa-analyzer.example.com'
  
  # OIDC Settings
  OidcIssuer:
    Type: String
    Default: ''
    Description: 'OIDC issuer URL. Required when "Authentication Method = oidc". Example for Okta: https://<okta-tenant-id>.us.auth0.com/authorize'
  
  OidcClientId:
    Type: String
    Default: ''
    Description: 'OIDC client ID. Required when "Authentication Method = oidc".'
  
  OidcAuthorizationEndpoint:
    Type: String
    Default: ''
    Description: 'OIDC authorization endpoint. Required when "Authentication Method = oidc". Example for Okta: https://<okta-tenant-id>.us.auth0.com/authorize'
  
  OidcTokenEndpoint:
    Type: String
    Default: ''
    Description: 'OIDC token endpoint. Required when "Authentication Method = oidc". Example for Okta: https://<okta-tenant-id>.us.auth0.com/oauth/token'
  
  OidcUserInfoEndpoint:
    Type: String
    Default: ''
    Description: 'OIDC user info endpoint. Required when "Authentication Method = oidc". Example for Okta: https://<okta-tenant-id>.us.auth0.com/userinfo'
  
  OidcLogoutUrl:
    Type: String
    Default: ''
    Description: 'OIDC logout URL. Required when "Authentication Method = oidc". Example for Okta: https://<okta-tenant-id>.us.auth0.com/v2/logout?client_id=<oidc-client-id>&returnTo=https://wa-analyzer.example.com (# Refer to https://auth0.com/docs/authenticate/login/logout)'
  
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Global Settings (Required)"
        Parameters: 
          - PublicLoadBalancer
          - ModelId
      - 
        Label: 
          default: "Authentication Settings (Optional)"
        Parameters: 
          - Authentication
          - AuthType
          - CertificateArn
      - 
        Label: 
          default: 'New-Cognito Settings (Optional, only if Authentication Method is "new-cognito")'
        Parameters: 
          - CognitoDomainPrefix
          - CallbackUrls
          - LogoutUrl
      - 
        Label: 
          default: 'Existing-Cognito Settings (Optional, only if Authentication Method is "existing-cognito")'
        Parameters: 
          - ExistingUserPoolArn
          - ExistingUserPoolClientId
          - ExistingUserPoolDomain
          - ExistingCognitoLogoutUrl
      - 
        Label: 
          default: 'OIDC Settings (Optional, only if Authentication Method is "oidc")'
        Parameters: 
          - OidcIssuer
          - OidcClientId
          - OidcAuthorizationEndpoint
          - OidcTokenEndpoint
          - OidcUserInfoEndpoint
          - OidcLogoutUrl
    ParameterLabels:
      # Global Settings
      PublicLoadBalancer: 
        default: "Deploy with internet-facing Application Load Balancer?"
      ModelId:
        default: "Amazon Bedrock Model ID"
        
      # Authentication Settings
      Authentication:
        default: "Enable Authentication"
      AuthType:
        default: "Authentication Method"
      CertificateArn:
        default: "SSL Certificate ARN"
        
      # New Cognito Settings
      CognitoDomainPrefix:
        default: "Cognito Domain Prefix"
      CallbackUrls:
        default: "Allowed Callback URLs"
      LogoutUrl:
        default: "Logout Redirect URL"
        
      # Existing Cognito Settings
      ExistingUserPoolArn:
        default: "Existing Cognito User Pool ARN"
      ExistingUserPoolClientId:
        default: "Existing Cognito Client ID"
      ExistingUserPoolDomain:
        default: "Existing Cognito Domain"
      ExistingCognitoLogoutUrl:
        default: "Existing Cognito Logout URL"
        
      # OIDC Settings
      OidcIssuer:
        default: "OIDC Issuer URL"
      OidcClientId:
        default: "OIDC Client ID"
      OidcAuthorizationEndpoint:
        default: "OIDC Authorization Endpoint URL"
      OidcTokenEndpoint:
        default: "OIDC Token Endpoint URL"
      OidcUserInfoEndpoint:
        default: "OIDC User Info Endpoint URL"
      OidcLogoutUrl:
        default: "OIDC Logout URL"

Conditions:
  IsAuthenticated: !Equals [!Ref Authentication, 'True']
  IsNewCognito: !And [!Equals [!Ref Authentication, 'True'], !Equals [!Ref AuthType, 'new-cognito']]
  IsExistingCognito: !And [!Equals [!Ref Authentication, 'True'], !Equals [!Ref AuthType, 'existing-cognito']]
  IsOidc: !And [!Equals [!Ref Authentication, 'True'], !Equals [!Ref AuthType, 'oidc']]

Rules:
  CertificateArnRequiredWhenAuthEnabled:
    RuleCondition: !Equals [!Ref Authentication, 'True']
    Assertions:
      - Assert: !Not [!Equals [!Ref CertificateArn, '']]
        AssertDescription: "When Authentication is enabled, Certificate ARN is required"

  NewCognitoParametersRequired:
    RuleCondition: !And
      - !Equals [!Ref Authentication, 'True']
      - !Equals [!Ref AuthType, 'new-cognito']
    Assertions:
      - Assert: !Not [!Equals [!Ref CognitoDomainPrefix, '']]
        AssertDescription: "When using new-cognito auth type, Cognito Domain Prefix is required"
      - Assert: !Not [!Equals [!Ref CallbackUrls, '']]
        AssertDescription: "When using new-cognito auth type, Callback URLs are required"
      - Assert: !Not [!Equals [!Ref LogoutUrl, '']]
        AssertDescription: "When using new-cognito auth type, Logout URL is required"

  ExistingCognitoParametersRequired:
    RuleCondition: !And
      - !Equals [!Ref Authentication, 'True']
      - !Equals [!Ref AuthType, 'existing-cognito']
    Assertions:
      - Assert: !Not [!Equals [!Ref ExistingUserPoolArn, '']]
        AssertDescription: "When using existing-cognito auth type, Existing User Pool ARN is required"
      - Assert: !Not [!Equals [!Ref ExistingUserPoolClientId, '']]
        AssertDescription: "When using existing-cognito auth type, Existing User Pool Client ID is required"
      - Assert: !Not [!Equals [!Ref ExistingUserPoolDomain, '']]
        AssertDescription: "When using existing-cognito auth type, Existing User Pool Domain is required"
      - Assert: !Not [!Equals [!Ref ExistingCognitoLogoutUrl, '']]
        AssertDescription: "When using existing-cognito auth type, Existing Cognito Logout URL is required"

  OidcParametersRequired:
    RuleCondition: !And
      - !Equals [!Ref Authentication, 'True']
      - !Equals [!Ref AuthType, 'oidc']
    Assertions:
      - Assert: !Not [!Equals [!Ref OidcIssuer, '']]
        AssertDescription: "When using OIDC auth type, OIDC Issuer URL is required"
      - Assert: !Not [!Equals [!Ref OidcClientId, '']]
        AssertDescription: "When using OIDC auth type, OIDC Client ID is required"
      - Assert: !Not [!Equals [!Ref OidcAuthorizationEndpoint, '']]
        AssertDescription: "When using OIDC auth type, OIDC Authorization Endpoint URL is required"
      - Assert: !Not [!Equals [!Ref OidcTokenEndpoint, '']]
        AssertDescription: "When using OIDC auth type, OIDC Token Endpoint URL is required"
      - Assert: !Not [!Equals [!Ref OidcUserInfoEndpoint, '']]
        AssertDescription: "When using OIDC auth type, OIDC User Info Endpoint URL is required"
      - Assert: !Not [!Equals [!Ref OidcLogoutUrl, '']]
        AssertDescription: "When using OIDC auth type, OIDC Logout URL is required"

  AuthTypeValidation:
    RuleCondition: !Equals [!Ref Authentication, 'True']
    Assertions:
      - Assert: !Or
          - !Equals [!Ref AuthType, 'new-cognito']
          - !Equals [!Ref AuthType, 'existing-cognito']
          - !Equals [!Ref AuthType, 'oidc']
        AssertDescription: "When Authentication is enabled, Auth Type must be one of: new-cognito, existing-cognito, oidc"
  
Resources:
  # CloudWatch Log Group with retention
  DeploymentLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      # Use a combination of region, account and stack name for uniqueness
      LogGroupName: !Join 
        - '-'
        - - 'iac-deployment-logs'
          - !Ref 'AWS::Region'
          - !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]]]
      RetentionInDays: 90

  # VPC and Networking Resources
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.0.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-Subnet'
  
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for EC2 deployment instance'
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2-SG'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'
  
  IGWAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-RT'
  
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # IAM Role for EC2 Instance
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2-Role'

  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref EC2Role

  # CloudWatch Logs Policy for the new log group
  EC2CloudWatchLogsPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: 'EC2CloudWatchLogsAccess'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
            Resource: !GetAtt DeploymentLogGroup.Arn
      Roles:
        - !Ref EC2Role

  # EC2 Instance with cfn-init metadata
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT1H30M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setup_basic_logs
            - 02_ensure_connectivity
            - 03_install_packages
            - 04_setup_cloudwatch
            - 05_configure_services
            - 06_deploy_analyzer
            - 07_cleanup

        # Setup basic logging first (file-based only)
        01_setup_basic_logs:
          files:
            /var/log/user-data.log:
              content: "Starting EC2 initialization...\n"
              mode: "000666"
            /var/log/deploy-wa-analyzer.log:
              content: "Well-Architected IaC Analyzer deployment log\n"
              mode: "000666"
              
        # Ensure network connectivity is established
        02_ensure_connectivity:
          files:
            /usr/local/bin/wait-for-network.sh:
              content: |
                #!/bin/bash
                echo "Checking network connectivity..." >> /var/log/user-data.log
                
                # Wait for network to be available
                for i in {1..30}; do
                  echo "Network check attempt $i..." >> /var/log/user-data.log
                  if ping -c 1 amazon.com > /dev/null 2>&1; then
                    echo "Network is up!" >> /var/log/user-data.log
                    exit 0
                  fi
                  sleep 10
                done
                
                echo "Network check failed after 30 attempts" >> /var/log/user-data.log
                exit 1
              mode: "000755"
          commands:
            01_wait_for_network:
              command: "/usr/local/bin/wait-for-network.sh"
            02_fix_dns:
              command: |
                echo "Ensuring DNS configuration is correct..." >> /var/log/user-data.log
                # Add public DNS servers as fallback
                echo "nameserver 8.8.8.8" >> /etc/resolv.conf
                echo "nameserver 1.1.1.1" >> /etc/resolv.conf
                cat /etc/resolv.conf >> /var/log/user-data.log
            03_test_repo_access:
              command: |
                echo "Testing repository access..." >> /var/log/user-data.log
                # Clear dnf cache
                dnf clean all >> /var/log/user-data.log 2>&1
                # Force refresh the repo metadata with increased timeout
                dnf makecache --refresh --assumeyes --setopt=timeout=300 >> /var/log/user-data.log 2>&1
                RESULT=$?
                echo "Repository refresh completed with status $RESULT" >> /var/log/user-data.log
                exit 0  # Continue even if this fails

        # Install required packages
        03_install_packages:
          files:
            /usr/local/bin/install-packages.sh:
              content: |
                #!/bin/bash
                
                echo "Starting package installation..." >> /var/log/user-data.log
                
                # Retry logic for package installation
                MAX_RETRIES=5
                RETRY_DELAY=30
                
                for i in $(seq 1 $MAX_RETRIES); do
                  echo "Installation attempt $i of $MAX_RETRIES" >> /var/log/user-data.log
                  
                  # Clean any cached data
                  dnf clean all >> /var/log/user-data.log 2>&1
                  
                  # Try to install packages
                  if dnf install -y git docker python3.11 python3.11-pip pip nodejs20 npm aws-cli aws-cfn-bootstrap amazon-cloudwatch-agent >> /var/log/user-data.log 2>&1; then
                    echo "Package installation successful!" >> /var/log/user-data.log
                    exit 0
                  else
                    echo "Package installation failed. Retrying in $RETRY_DELAY seconds..." >> /var/log/user-data.log
                    sleep $RETRY_DELAY
                  fi
                done
                
                echo "Failed to install packages after $MAX_RETRIES attempts" >> /var/log/user-data.log
                exit 1
              mode: "000755"
          commands:
            01_install_dependencies:
              command: "/usr/local/bin/install-packages.sh"

        # Setup CloudWatch after packages are installed
        04_setup_cloudwatch:
          commands:
            01_configure_cloudwatch:
              command: !Sub |
                echo "Configuring CloudWatch Agent..." >> /var/log/user-data.log
                cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << EOF
                {
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/user-data.log",
                            "log_group_name": "${DeploymentLogGroup}",
                            "log_stream_name": "{instance_id}-user-data",
                            "timezone": "UTC"
                          },
                          {
                            "file_path": "/var/log/deploy-wa-analyzer.log",
                            "log_group_name": "${DeploymentLogGroup}",
                            "log_stream_name": "{instance_id}-deploy",
                            "timezone": "UTC"
                          }
                        ]
                      }
                    }
                  }
                }
                EOF
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
                echo "CloudWatch Agent configured and started" >> /var/log/user-data.log

        # Configure services
        05_configure_services:
          commands:
            01_enable_docker:
              command: "systemctl enable docker && systemctl start docker >> /var/log/user-data.log 2>&1"
            02_add_docker_user:
              command: "usermod -aG docker ec2-user >> /var/log/user-data.log 2>&1"
            03_install_cdk:
              command: "npm install -g aws-cdk >> /var/log/user-data.log 2>&1"

        # Deploy analyzer
        06_deploy_analyzer:
          files:
            /home/ec2-user/update-config.sh:
              content: !Sub |
                #!/bin/bash -xe
                CONFIG_FILE="/home/ec2-user/well-architected-iac-analyzer/config.ini"
                
                # Update basic settings
                sed -i "s/^model_id = .*$/model_id = ${ModelId}/" $CONFIG_FILE
                sed -i "s/^public_load_balancer = .*$/public_load_balancer = ${PublicLoadBalancer}/" $CONFIG_FILE
                
                # Update authentication settings
                sed -i "s/^authentication = .*$/authentication = ${Authentication}/" $CONFIG_FILE
                sed -i "s/^auth_type = .*$/auth_type = ${AuthType}/" $CONFIG_FILE
                
                # Update certificate ARN if specified
                if [ "${CertificateArn}" != "" ]; then
                  sed -i "s|^certificate_arn = .*$|certificate_arn = ${CertificateArn}|" $CONFIG_FILE
                fi
                
                # Update New Cognito settings if applicable
                if [ "${AuthType}" == "new-cognito" ]; then
                  if [ "${CognitoDomainPrefix}" != "" ]; then
                    sed -i "s/^cognito_domain_prefix = .*$/cognito_domain_prefix = ${CognitoDomainPrefix}/" $CONFIG_FILE
                  fi
                  
                  if [ "${CallbackUrls}" != "" ]; then
                    sed -i "s|^callback_urls = .*$|callback_urls = ${CallbackUrls}|" $CONFIG_FILE
                  fi
                  
                  if [ "${LogoutUrl}" != "" ]; then
                    sed -i "s|^logout_url = .*$|logout_url = ${LogoutUrl}|" $CONFIG_FILE
                  fi
                fi
                
                # Update Existing Cognito settings if applicable
                if [ "${AuthType}" == "existing-cognito" ]; then
                  if [ "${ExistingUserPoolArn}" != "" ]; then
                    sed -i "s|^existing_user_pool_arn = .*$|existing_user_pool_arn = ${ExistingUserPoolArn}|" $CONFIG_FILE
                  fi
                  
                  if [ "${ExistingUserPoolClientId}" != "" ]; then
                    sed -i "s/^existing_user_pool_client_id = .*$/existing_user_pool_client_id = ${ExistingUserPoolClientId}/" $CONFIG_FILE
                  fi
                  
                  if [ "${ExistingUserPoolDomain}" != "" ]; then
                    sed -i "s/^existing_user_pool_domain = .*$/existing_user_pool_domain = ${ExistingUserPoolDomain}/" $CONFIG_FILE
                  fi
                  
                  if [ "${ExistingCognitoLogoutUrl}" != "" ]; then
                    sed -i "s|^existing_cognito_logout_url = .*$|existing_cognito_logout_url = ${ExistingCognitoLogoutUrl}|" $CONFIG_FILE
                  fi
                fi
                
                # Update OIDC settings if applicable
                if [ "${AuthType}" == "oidc" ]; then
                  if [ "${OidcIssuer}" != "" ]; then
                    sed -i "s|^oidc_issuer = .*$|oidc_issuer = ${OidcIssuer}|" $CONFIG_FILE
                  fi
                  
                  if [ "${OidcClientId}" != "" ]; then
                    sed -i "s/^oidc_client_id = .*$/oidc_client_id = ${OidcClientId}/" $CONFIG_FILE
                  fi
                  
                  if [ "${OidcAuthorizationEndpoint}" != "" ]; then
                    sed -i "s|^oidc_authorization_endpoint = .*$|oidc_authorization_endpoint = ${OidcAuthorizationEndpoint}|" $CONFIG_FILE
                  fi
                  
                  if [ "${OidcTokenEndpoint}" != "" ]; then
                    sed -i "s|^oidc_token_endpoint = .*$|oidc_token_endpoint = ${OidcTokenEndpoint}|" $CONFIG_FILE
                  fi
                  
                  if [ "${OidcUserInfoEndpoint}" != "" ]; then
                    sed -i "s|^oidc_user_info_endpoint = .*$|oidc_user_info_endpoint = ${OidcUserInfoEndpoint}|" $CONFIG_FILE
                  fi
                  
                  if [ "${OidcLogoutUrl}" != "" ]; then
                    sed -i "s|^oidc_logout_url = .*$|oidc_logout_url = ${OidcLogoutUrl}|" $CONFIG_FILE
                  fi
                fi
                
                # Log the updated configuration
                echo "Updated configuration:" >> /var/log/deploy-wa-analyzer.log
                cat $CONFIG_FILE >> /var/log/deploy-wa-analyzer.log
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
              
            /home/ec2-user/run-deployment.sh:
              content: !Sub |
                #!/bin/bash -xe
                cd /home/ec2-user
                git clone https://github.com/aws-samples/well-architected-iac-analyzer.git
                cd well-architected-iac-analyzer
                
                # Update the configuration
                /home/ec2-user/update-config.sh
                
                chmod +x deploy-wa-analyzer.sh
                export AWS_REGION=${AWS::Region}
                ./deploy-wa-analyzer.sh -r ${AWS::Region} -c docker -a ${AWS::StackName}
                exit $?
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
          commands:
            01_run_deployment:
              command: !Sub |
                echo "Starting WA-IaC-Analyzer deployment at $(date)" >> /var/log/deploy-wa-analyzer.log
                sudo -u ec2-user /home/ec2-user/run-deployment.sh >> /var/log/deploy-wa-analyzer.log 2>&1
                DEPLOYMENT_STATUS=$?
                echo "Deployment completed with status $DEPLOYMENT_STATUS at $(date)" >> /var/log/deploy-wa-analyzer.log
                # Create file marker to indicate deployment status for next steps
                if [ $DEPLOYMENT_STATUS -eq 0 ]; then
                  touch /tmp/deployment-success
                else
                  touch /tmp/deployment-failure
                  # Send failure signal if deployment failed
                  /opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region} >> /var/log/deploy-wa-analyzer.log 2>&1
                fi

        # Cleanup and self-terminate
        07_cleanup:
          files:
            /tmp/delete-stack-event.json:
              content: !Sub |
                [
                  {
                    "Source": "iac.analyzer.deployment",
                    "DetailType": "Stack Cleanup Request",
                    "Detail": "{\"stack-name\": \"${AWS::StackName}\"}",
                    "EventBusName": "default"
                  }
                ]
              mode: "000644"
            /tmp/delete-stack.sh:
              content: !Sub |
                #!/bin/bash
                export AWS_DEFAULT_REGION=${AWS::Region}

                cat /tmp/delete-stack-event.json
                
                # Send event to EventBridge for stack deletion
                echo "Sending deletion event to EventBridge at $(date)"
                aws events put-events --entries file:///tmp/delete-stack-event.json
                
                # Wait 2 minutes before trying again in case the first attempt fails
                sleep 120
                
                # Send the event again as a backup
                echo "Sending backup deletion event to EventBridge at $(date)"
                aws events put-events --entries file:///tmp/delete-stack-event.json
              mode: "000755"
          commands:
            01_send_signal_first:
              command: !Sub |
                echo "Sending completion signal to CloudFormation at $(date)" >> /var/log/deploy-wa-analyzer.log
                /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region} >> /var/log/deploy-wa-analyzer.log 2>&1
                
                # Wait a moment to ensure signal is processed
                sleep 30
                echo "Signal sent successfully at $(date)" >> /var/log/deploy-wa-analyzer.log
            
            02_schedule_deletion:
              command: |
                if [ -f /tmp/deployment-failure ]; then
                  echo "Deployment failed, skipping cleanup" >> /var/log/deploy-wa-analyzer.log
                else
                  echo "Deployment was successful, proceeding with cleanup" >> /var/log/deploy-wa-analyzer.log
                  nohup /tmp/delete-stack.sh >> /var/log/deploy-wa-analyzer.log 2>&1 &
                fi

    Properties:
      InstanceType: t3.xlarge
      # Direct reference to the latest Amazon Linux 2023 AMI through SSM parameter
      ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64}}'
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !GetAtt EC2SecurityGroup.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp3
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Deployer'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Create log file with exec redirection
          touch /var/log/user-data.log
          chmod 666 /var/log/user-data.log
          exec > >(tee -a /var/log/user-data.log) 2>&1

          echo "Starting UserData execution at $(date)"

          # Set environment variable for region
          export AWS_DEFAULT_REGION=${AWS::Region}
          echo "AWS_DEFAULT_REGION=${AWS::Region}" >> /home/ec2-user/.bashrc

          # Basic installation of cfn-bootstrap
          echo "Initial installation of cfn-bootstrap..."
          dnf clean all
          # Retry dnf update with better error handling
          for i in {1..5}; do
            echo "Update attempt $i..."
            if dnf update -y; then
              echo "Update successful!"
              break
            else
              echo "Update failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          # Retry installing cfn-bootstrap
          for i in {1..5}; do
            echo "cfn-bootstrap installation attempt $i..."
            if dnf install -y aws-cfn-bootstrap; then
              echo "cfn-bootstrap installation successful!"
              break
            else
              echo "cfn-bootstrap installation failed, retrying in 10 seconds..."
              sleep 10
            fi
          done

          # Wait for network to be fully functional
          echo "Waiting for networking to stabilize..."
          for i in {1..6}; do
            echo "Network check attempt $i..."
            if ping -c 1 amazon.com > /dev/null 2>&1; then
              echo "Network is up!"
              break
            fi
            sleep 10
          done
          
          # Initialize cfn-init with retries
          echo "Running cfn-init..."
          for i in {1..3}; do
            echo "cfn-init attempt $i..."
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region} --configsets default
            CFN_INIT_RESULT=$?
            
            if [ $CFN_INIT_RESULT -eq 0 ]; then
              echo "cfn-init completed successfully"
              break
            else
              echo "cfn-init failed with status $CFN_INIT_RESULT, retrying in 30 seconds..."
              sleep 30
            fi
          done

Outputs:
  DeploymentLogs:
    Description: 'CloudWatch Log Group containing deployment logs'
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/${DeploymentLogGroup}'